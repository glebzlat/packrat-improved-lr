@entry
Grammar <- Expr EOF

# Direct left recursion
Expr <- Expr PLUS Mul / Expr MINUS Mul / Mul
Mul  <- Mul MUL Term / Mul DIV Term / LBRACE Expr RBRACE / Term
Term <- Int / Primary / Mutual

# Indirect left recursion
Primary <- MethodInvocation / FieldAccess / Id
MethodInvocation <- Primary '.' Id CALL / Id CALL
FieldAccess <- Primary '.' Id

# Mutual left recursion
Mutual <- L WS
L <- P '.' Id / '$'
P <- P Int / L

Int <- [0-9] WS
Id  <- [a-z] WS

PLUS <- '+' WS
MINUS <- '-' WS
MUL <- '*' WS
DIV <- '/' WS
LBRACE <- '(' WS
RBRACE <- ')' WS
CALL <- '()' WS

WS <- Spacing*
Spacing <- ' ' / '\r' / '\n' / '\t'

EOF <- !.
